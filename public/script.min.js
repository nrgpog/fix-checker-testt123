class AeolusChecker {
    constructor() {
        this.running = false;
        this.stats = {
            checked: 0,
            lives: 0,
            deads: 0
        };
        this.init();
    }

    init() {
        this.elements = {
            checkBtn: document.getElementById('checkBtn'),
            clearBtn: document.getElementById('clearBtn'),
            cardsInput: document.getElementById('cards'),
            gateway: document.getElementById('gateway'),
            livesList: document.getElementById('livesList'),
            deadsList: document.getElementById('deadsList'),
            checkedCount: document.getElementById('checkedCount'),
            livesCount: document.getElementById('livesCount'),
            deadsCount: document.getElementById('deadsCount'),
            successRate: document.getElementById('successRate'),
            loadingOverlay: document.getElementById('loadingOverlay')
        };

        this.bindEvents();
    }

    bindEvents() {
        this.elements.checkBtn.addEventListener('click', () => this.startChecking());
        this.elements.clearBtn.addEventListener('click', () => this.clearAll());
    }

    async startChecking() {
        const cards = this.elements.cardsInput.value
            .split('\n')
            .map(card => card.trim())
            .filter(card => card);

        if(!cards.length || cards.length > 20) {
            this.showNotification('Ingresa entre 1 y 20 tarjetas', 'error');
            return;
        }

        this.running = true;
        this.elements.checkBtn.disabled = true;
        this.elements.loadingOverlay.style.display = 'flex';
        this.resetCounters();

        for(const card of cards) {
            if(!this.running) break;
            await this.checkCard(card);
            await new Promise(r => setTimeout(r, 2000));
        }

        this.running = false;
        this.elements.checkBtn.disabled = false;
        this.elements.loadingOverlay.style.display = 'none';
    }

    async checkCard(card) {
        try {
            const gateway = this.elements.gateway.value;
            const response = await fetch(`/api/${gateway}/check`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({cards: [card]})
            });

            if (!response.ok) {
                throw new Error('Gateway Error');
            }

            const result = await response.json();
            
            if(result.success && result.results[0]) {
                this.stats.checked++;
                const cardResult = result.results[0];
                
                if(cardResult.status === 'Live') {
                    await this.addCard('live', card, cardResult.message);
                    this.stats.lives++;
                } else {
                    await this.addCard('dead', card, cardResult.message);
                    this.stats.deads++;
                }
                
                this.updateStats();
            }
        } catch(error) {
            console.error('Check error:', error);
            await this.addCard('dead', card, {
                status: 'Dead',
                message: 'Card Declined | .gg/aeolous'
            });
            this.stats.checked++;
            this.stats.deads++;
            this.updateStats();
        }
    }

    async addCard(type, card, result) {
        const div = document.createElement('div');
        div.className = `card-item ${type}`;
        
        div.innerHTML = `
            <div class="card-content">
                <div class="card-header">
                    <div class="card-number sensitive-data">
                        ${card}
                    </div>
                    <button class="copy-btn" onclick="copyToClipboard('${card} | ${result.split('|').slice(0, -1).join('|').trim()}')">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
                <div class="card-status">
                    <span class="status-badge ${type}">
                        <i class="fas fa-${type === 'live' ? 'check' : 'times'}-circle"></i>
                        ${type === 'live' ? 'Live' : 'Dead'}
                    </span>
                    <span class="card-details-inline">
                        ${result}
                    </span>
                </div>
            </div>
        `;
        
        this.elements[type === 'live' ? 'livesList' : 'deadsList'].appendChild(div);
        div.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }

    updateStats() {
        this.elements.checkedCount.textContent = this.stats.checked;
        this.elements.livesCount.textContent = this.stats.lives;
        this.elements.deadsCount.textContent = this.stats.deads;
        
        const rate = this.stats.checked ? 
            ((this.stats.lives / this.stats.checked) * 100).toFixed(1) : '0.0';
        this.elements.successRate.textContent = `${rate}%`;
    }

    resetCounters() {
        this.stats = {checked: 0, lives: 0, deads: 0};
        this.updateStats();
        this.elements.livesList.innerHTML = '';
        this.elements.deadsList.innerHTML = '';
    }

    clearAll() {
        this.elements.cardsInput.value = '';
        this.resetCounters();
    }

    showNotification(message, type = 'info') {
        const notifications = document.querySelector('.notifications') || (() => {
            const div = document.createElement('div');
            div.className = 'notifications';
            document.body.appendChild(div);
            return div;
        })();

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : 'info'}-circle"></i>
            <span>${message}</span>
        `;

        notifications.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        const notification = document.createElement('div');
        notification.className = 'notification success';
        notification.innerHTML = `
            <i class="fas fa-check"></i>
            CC Copiada
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 2000);
    }).catch(err => {
        console.error('Error al copiar:', err);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    window.checker = new AeolusChecker();
});
